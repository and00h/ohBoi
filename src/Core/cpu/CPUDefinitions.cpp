//
// CreAted by Antonio on 08/09/20.
//

#include <string>
#include <vector>

#include "Core/Cpu/Cpu.h"

const std::vector<std::string> instr {
        "NOP",                    // 0x00
        "LD BC, 0x%04X",        // 0x01
        "LD (BC), A",            // 0x02
        "INC BC",                // 0x03
        "INC B",                // 0x04
        "DEC B",                // 0x05
        "LD B, 0x%02X",            // 0x06
        "RLCA",                    // 0x07
        "LD (0x%04X), SP",        // 0x08
        "ADD HL, BC",            // 0x09
        "LD A, (BC)",            // 0x0a
        "DEC BC",                // 0x0b
        "INC C",                // 0x0c
        "DEC C",                // 0x0d
        "LD C, 0x%02X",            // 0x0e
        "RRCA",                    // 0x0f
        "STOP",                    // 0x10
        "LD DE, 0x%04X",        // 0x11
        "LD (DE), A",            // 0x12
        "INC DE",                // 0x13
        "INC D",                // 0x14
        "DEC D",                // 0x15
        "LD D, 0x%02X",            // 0x16
        "RLA",                    // 0x17
        "JR 0x%02X",            // 0x18
        "ADD HL, DE",            // 0x19
        "LD A, (DE)",            // 0x1a
        "DEC DE",                // 0x1b
        "INC E",                // 0x1c
        "DEC E",                // 0x1d
        "LD E, 0x%02X",            // 0x1e
        "RRA",                    // 0x1f
        "JR NZ, 0x%02X",        // 0x20
        "LD HL, 0x%04X",        // 0x21
        "LDI (HL), A",            // 0x22
        "INC HL",                // 0x23
        "INC H",                // 0x24
        "DEC H",                // 0x25
        "LD H, 0x%02X",            // 0x26
        "DAA",                    // 0x27
        "JR Z, 0x%02X",            // 0x28
        "ADD HL, HL",            // 0x29
        "LDI A, (HL)",            // 0x2a
        "DEC HL",                // 0x2b
        "INC L",                // 0x2c
        "DEC L",                // 0x2d
        "LD L, 0x%02X",            // 0x2e
        "CPL",                    // 0x2f
        "JR NC, 0x%02X",        // 0x30
        "LD SP, 0x%04X",        // 0x31
        "LDD (HL), A",            // 0x32
        "INC SP",                // 0x33
        "INC (HL)",                // 0x34
        "DEC (HL)",                // 0x35
        "LD (HL), 0x%02X",        // 0x36
        "SCF",                    // 0x37
        "JR C, 0x%02X",            // 0x38
        "ADD HL, SP",            // 0x39
        "LDD A, (HL)",            // 0x3a
        "DEC SP",                // 0x3b
        "INC A",                // 0x3c
        "DEC A",                // 0x3d
        "LD A, 0x%02X",            // 0x3e
        "CCF",                    // 0x3f
        "LD B, B",                // 0x40
        "LD B, C",                // 0x41
        "LD B, D",                // 0x42
        "LD B, E",                // 0x43
        "LD B, H",                // 0x44
        "LD B, L",                // 0x45
        "LD B, (HL)",            // 0x46
        "LD B, A",                // 0x47
        "LD C, B",                // 0x48
        "LD C, C",                // 0x49
        "LD C, D",                // 0x4a
        "LD C, E",                // 0x4b
        "LD C, H",                // 0x4c
        "LD C, L",                // 0x4d
        "LD C, (HL)",            // 0x4e
        "LD C, A",                // 0x4f
        "LD D, B",                // 0x50
        "LD D, C",                // 0x51
        "LD D, D",                // 0x52
        "LD D, E",                // 0x53
        "LD D, H",                // 0x54
        "LD D, L",                // 0x55
        "LD D, (HL)",            // 0x56
        "LD D, A",                // 0x57
        "LD E, B",                // 0x58
        "LD E, C",                // 0x59
        "LD E, D",                // 0x5a
        "LD E, E",                // 0x5b
        "LD E, H",                // 0x5c
        "LD E, L",                // 0x5d
        "LD E, (HL)",            // 0x5e
        "LD E, A",                // 0x5f
        "LD H, B",                // 0x60
        "LD H, C",                // 0x61
        "LD H, D",                // 0x62
        "LD H, E",                // 0x63
        "LD H, H",                // 0x64
        "LD H, L",                // 0x65
        "LD H, (HL)",            // 0x66
        "LD H, A",                // 0x67
        "LD L, B",                // 0x68
        "LD L, C",                // 0x69
        "LD L, D",                // 0x6a
        "LD L, E",                // 0x6b
        "LD L, H",                // 0x6c
        "LD L, L",                // 0x6d
        "LD L, (HL)",            // 0x6e
        "LD L, A",                // 0x6f
        "LD (HL), B",            // 0x70
        "LD (HL), C",            // 0x71
        "LD (HL), D",            // 0x72
        "LD (HL), E",            // 0x73
        "LD (HL), H",            // 0x74
        "LD (HL), L",            // 0x75
        "HALT",                    // 0x76
        "LD (HL), A",            // 0x77
        "LD A, B",                // 0x78
        "LD A, C",                // 0x79
        "LD A, D",                // 0x7a
        "LD A, E",                // 0x7b
        "LD A, H",                // 0x7c
        "LD A, L",                // 0x7d
        "LD A, (HL)",            // 0x7e
        "LD A, A",                // 0x7f
        "ADD A, B",                // 0x80
        "ADD A, C",                // 0x81
        "ADD A, D",                // 0x82
        "ADD A, E",                // 0x83
        "ADD A, H",                // 0x84
        "ADD A, L",                // 0x85
        "ADD A, (HL)",            // 0x86
        "ADD A",                // 0x87
        "ADC B",                // 0x88
        "ADC C",                // 0x89
        "ADC D",                // 0x8a
        "ADC E",                // 0x8b
        "ADC H",                // 0x8c
        "ADC L",                // 0x8d
        "ADC (HL)",                // 0x8e
        "ADC A",                // 0x8f
        "SUB B",                // 0x90
        "SUB C",                // 0x91
        "SUB D",                // 0x92
        "SUB E",                // 0x93
        "SUB H",                // 0x94
        "SUB L",                // 0x95
        "SUB (HL)",                // 0x96
        "SUB A",                // 0x97
        "SBC B",                // 0x98
        "SBC C",                // 0x99
        "SBC D",                // 0x9a
        "SBC E",                // 0x9b
        "SBC H",                // 0x9c
        "SBC L",                // 0x9d
        "SBC (HL)",                // 0x9e
        "SBC A",                // 0x9f
        "AND B",                // 0xa0
        "AND C",                // 0xa1
        "AND D",                // 0xa2
        "AND E",                // 0xa3
        "AND H",                // 0xa4
        "AND L",                // 0xa5
        "AND (HL)",                // 0xa6
        "AND A",                // 0xa7
        "XOR B",                // 0xa8
        "XOR C",                // 0xa9
        "XOR D",                // 0xaa
        "XOR E",                // 0xab
        "XOR H",                // 0xac
        "XOR L",                // 0xad
        "XOR (HL)",                // 0xae
        "XOR A",                // 0xaf
        "OR B",                    // 0xb0
        "OR C",                    // 0xb1
        "OR D",                    // 0xb2
        "OR E",                    // 0xb3
        "OR H",                    // 0xb4
        "OR L",                    // 0xb5
        "OR (HL)",                // 0xb6
        "OR A",                    // 0xb7
        "CP B",                    // 0xb8
        "CP C",                    // 0xb9
        "CP D",                    // 0xba
        "CP E",                    // 0xbb
        "CP H",                    // 0xbc
        "CP L",                    // 0xbd
        "CP (HL)",                // 0xbe
        "CP A",                    // 0xbf
        "RET NZ",                // 0xc0
        "POP BC",                // 0xc1
        "JP NZ, 0x%04X",        // 0xc2
        "JP 0x%04X",            // 0xc3
        "CALL NZ, 0x%04X",        // 0xc4
        "PUSH BC",                // 0xc5
        "ADD A, 0x%02X",        // 0xc6
        "RST 0x00",                // 0xc7
        "RET Z",                // 0xc8
        "RET",                    // 0xc9
        "JP Z, 0x%04X",            // 0xca
        "CB %02X",                // 0xcb
        "CALL Z, 0x%04X",        // 0xcc
        "CALL 0x%04X",            // 0xcd
        "ADC 0x%02X",            // 0xce
        "RST 0x08",                // 0xcf
        "RET NC",                // 0xd0
        "POP DE",                // 0xd1
        "JP NC, 0x%04X",        // 0xd2
        "UNKNOWN",                // 0xd3
        "CALL NC, 0x%04X",        // 0xd4
        "PUSH DE",                // 0xd5
        "SUB 0x%02X",            // 0xd6
        "RST 0x10",                // 0xd7
        "RET C",                // 0xd8
        "RETI",                    // 0xd9
        "JP C, 0x%04X",            // 0xda
        "UNKNOWN",                // 0xdb
        "CALL C, 0x%04X",        // 0xdc
        "UNKNOWN",                // 0xdd
        "SBC 0x%02X",            // 0xde
        "RST 0x18",                // 0xdf
        "LD (0xFF00 + 0x%02X), A",        // 0xe0
        "POP HL",                // 0xe1
        "LD (0xFF00 + C), A",    // 0xe2
        "UNKNOWN",                // 0xe3
        "UNKNOWN",                // 0xe4
        "PUSH HL",                // 0xe5
        "AND 0x%02X",            // 0xe6
        "RST 0x20",                // 0xe7
        "ADD SP,0x%02X",        // 0xe8
        "JP HL",                // 0xe9
        "LD (0x%04X), A",        // 0xea
        "UNKNOWN",                // 0xeb
        "UNKNOWN",                // 0xec
        "UNKNOWN",                // 0xed
        "XOR 0x%02X",            // 0xee
        "RST 0x28",                // 0xef
        "LD A, (0xFF00 + 0x%02X)",        // 0xf0
        "POP AF",                // 0xf1
        "LD A, (0xFF00 + C)",    // 0xf2
        "DI",                    // 0xf3
        "UNKNOWN",                // 0xf4
        "PUSH AF",                // 0xf5
        "OR 0x%02X",            // 0xf6
        "RST 0x30",                // 0xf7
        "LD HL, SP+0x%02X",        // 0xf8
        "LD SP, HL",            // 0xf9
        "LD A, (0x%04X)",        // 0xfa
        "EI",                    // 0xfb
        "UNKNOWN",                // 0xfc
        "UNKNOWN",                // 0xfd
        "CP 0x%02X",            // 0xfe
        "RST 0x38"                // 0xff
};

const uint8_t cb_instructions_cycles[0x100] = {
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,
        8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,
        8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,
        8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8,
        8, 8, 8, 8, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8
};

const struct opcode opcodes[0x100] = {
        { 0, 4 },    // 0x00
        { 2, 12 },    // 0x01
        { 0, 8 },    // 0x02
        { 0, 8 },    // 0x03
        { 0, 4 },    // 0x04
        { 0, 4 },    // 0x05
        { 1, 8 },    // 0x06
        { 0, 4 },    // 0x07
        { 2, 20 },    // 0x08
        { 0, 8 },    // 0x09
        { 0, 8 },    // 0x0A
        { 0, 8 },    // 0x0B
        { 0, 4 },    // 0x0C
        { 0, 4 },    // 0x0D
        { 1, 8 },    // 0x0E
        { 0, 4 },    // 0x0F
        { 0, 4 },    // 0x10
        { 2, 12 },    // 0x11
        { 0, 8 },    // 0x12
        { 0, 8 },    // 0x13
        { 0, 4 },    // 0x14
        { 0, 4 },    // 0x15
        { 1, 8 },    // 0x16
        { 0, 4 },    // 0x17
        { 1, 12 },    // 0x18
        { 0, 8 },    // 0x19
        { 0, 8 },    // 0x1A
        { 0, 8 },    // 0x1B
        { 0, 4 },    // 0x1C
        { 0, 4 },    // 0x1D
        { 1, 8 },    // 0x1E
        { 0, 4 },    // 0x1F
        { 1, 12 },    // 0x20
        { 2, 12 },    // 0x21
        { 0, 8 },    // 0x22
        { 0, 8 },    // 0x23
        { 0, 4 },    // 0x24
        { 0, 4 },    // 0x25
        { 1, 8 },    // 0x26
        { 0, 4 },    // 0x27
        { 1, 12 },    // 0x28
        { 0, 8 },    // 0x29
        { 0, 8 },    // 0x2A
        { 0, 8 },    // 0x2B
        { 0, 4 },    // 0x2C
        { 0, 4 },    // 0x2D
        { 1, 8 },    // 0x2E
        { 0, 4 },    // 0x2F
        { 1, 12 },    // 0x30
        { 2, 12 },    // 0x31
        { 0, 8 },    // 0x32
        { 0, 8 },    // 0x33
        { 0, 12 },    // 0x34
        { 0, 12 },    // 0x35
        { 1, 12 },    // 0x36
        { 0, 4 },    // 0x37
        { 1, 12 },    // 0x38
        { 0, 8 },    // 0x39
        { 0, 8 },    // 0x3A
        { 0, 8 },    // 0x3B
        { 0, 4 },    // 0x3C
        { 0, 4 },    // 0x3D
        { 1, 8 },    // 0x3E
        { 0, 4 },    // 0x3F
        { 0, 4 },    // 0x40
        { 0, 4 },    // 0x41
        { 0, 4 },    // 0x42
        { 0, 4 },    // 0x43
        { 0, 4 },    // 0x44
        { 0, 4 },    // 0x45
        { 0, 8 },    // 0x46
        { 0, 4 },    // 0x47
        { 0, 4 },    // 0x48
        { 0, 4 },    // 0x49
        { 0, 4 },    // 0x4A
        { 0, 4 },    // 0x4B
        { 0, 4 },    // 0x4C
        { 0, 4 },    // 0x4D
        { 0, 8 },    // 0x4E
        { 0, 4 },    // 0x4F
        { 0, 4 },    // 0x50
        { 0, 4 },    // 0x51
        { 0, 4 },    // 0x52
        { 0, 4 },    // 0x53
        { 0, 4 },    // 0x54
        { 0, 4 },    // 0x55
        { 0, 8 },    // 0x56
        { 0, 4 },    // 0x57
        { 0, 4 },    // 0x58
        { 0, 4 },    // 0x59
        { 0, 4 },    // 0x5A
        { 0, 4 },    // 0x5B
        { 0, 4 },    // 0x5C
        { 0, 4 },    // 0x5D
        { 0, 8 },    // 0x5E
        { 0, 4 },    // 0x5F
        { 0, 4 },    // 0x60
        { 0, 4 },    // 0x61
        { 0, 4 },    // 0x62
        { 0, 4 },    // 0x63
        { 0, 4 },    // 0x64
        { 0, 4 },    // 0x65
        { 0, 8 },    // 0x66
        { 0, 4 },    // 0x67
        { 0, 4 },    // 0x68
        { 0, 4 },    // 0x69
        { 0, 4 },    // 0x6A
        { 0, 4 },    // 0x6B
        { 0, 4 },    // 0x6C
        { 0, 4 },    // 0x6D
        { 0, 8 },    // 0x6E
        { 0, 4 },    // 0x6F
        { 0, 8 },    // 0x70
        { 0, 8 },    // 0x71
        { 0, 8 },    // 0x72
        { 0, 8 },    // 0x73
        { 0, 8 },    // 0x74
        { 0, 8 },    // 0x75
        { 0, 4 },    // 0x76
        { 0, 8 },    // 0x77
        { 0, 4 },    // 0x78
        { 0, 4 },    // 0x79
        { 0, 4 },    // 0x7A
        { 0, 4 },    // 0x7B
        { 0, 4 },    // 0x7C
        { 0, 4 },    // 0x7D
        { 0, 8 },    // 0x7E
        { 0, 4 },    // 0x7F
        { 0, 4 },    // 0x80
        { 0, 4 },    // 0x81
        { 0, 4 },    // 0x82
        { 0, 4 },    // 0x83
        { 0, 4 },    // 0x84
        { 0, 4 },    // 0x85
        { 0, 8 },    // 0x86
        { 0, 4 },    // 0x87
        { 0, 4 },    // 0x88
        { 0, 4 },    // 0x89
        { 0, 4 },    // 0x8A
        { 0, 4 },    // 0x8B
        { 0, 4 },    // 0x8C
        { 0, 4 },    // 0x8D
        { 0, 8 },    // 0x8E
        { 0, 4 },    // 0x8F
        { 0, 4 },    // 0x90
        { 0, 4 },    // 0x91
        { 0, 4 },    // 0x92
        { 0, 4 },    // 0x93
        { 0, 4 },    // 0x94
        { 0, 4 },    // 0x95
        { 0, 8 },    // 0x96
        { 0, 4 },    // 0x97
        { 0, 4 },    // 0x98
        { 0, 4 },    // 0x99
        { 0, 4 },    // 0x9A
        { 0, 4 },    // 0x9B
        { 0, 4 },    // 0x9C
        { 0, 4 },    // 0x9D
        { 0, 8 },    // 0x9E
        { 0, 4 },    // 0x9F
        { 0, 4 },    // 0xA0
        { 0, 4 },    // 0xA1
        { 0, 4 },    // 0xA2
        { 0, 4 },    // 0xA3
        { 0, 4 },    // 0xA4
        { 0, 4 },    // 0xA5
        { 0, 8 },    // 0xA6
        { 0, 4 },    // 0xA7
        { 0, 4 },    // 0xA8
        { 0, 4 },    // 0xA9
        { 0, 4 },    // 0xAA
        { 0, 4 },    // 0xAB
        { 0, 4 },    // 0xAC
        { 0, 4 },    // 0xAD
        { 0, 8 },    // 0xAE
        { 0, 4 },    // 0xAF
        { 0, 4 },    // 0xB0
        { 0, 4 },    // 0xB1
        { 0, 4 },    // 0xB2
        { 0, 4 },    // 0xB3
        { 0, 4 },    // 0xB4
        { 0, 4 },    // 0xB5
        { 0, 8 },    // 0xB6
        { 0, 4 },    // 0xB7
        { 0, 4 },    // 0xB8
        { 0, 4 },    // 0xB9
        { 0, 4 },    // 0xBA
        { 0, 4 },    // 0xBB
        { 0, 4 },    // 0xBC
        { 0, 4 },    // 0xBD
        { 0, 8 },    // 0xBE
        { 0, 4 },    // 0xBF
        { 0, 20 },    // 0xC0
        { 0, 12 },    // 0xC1
        { 2, 16 },    // 0xC2
        { 2, 16 },    // 0xC3
        { 2, 24 },    // 0xC4
        { 0, 16 },    // 0xC5
        { 1, 8 },    // 0xC6
        { 0, 16 },    // 0xC7
        { 0, 20 },    // 0xC8
        { 0, 16 },    // 0xC9
        { 2, 16 },    // 0xCA
        { 1, 0 },    // 0xCB
        { 2, 24 },    // 0xCC
        { 2, 24 },    // 0xCD
        { 1, 8 },    // 0xCE
        { 0, 16 },    // 0xCF
        { 0, 20 },    // 0xD0
        { 0, 12 },    // 0xD1
        { 2, 16 },    // 0xD2
        { 0, 0 },    // 0xD3
        { 2, 24 },    // 0xD4
        { 0, 16 },    // 0xD5
        { 1, 8 },    // 0xD6
        { 0, 16 },    // 0xD7
        { 0, 20 },    // 0xD8
        { 0, 16 },    // 0xD9
        { 2, 16 },    // 0xDA
        { 0, 0 },    // 0xDB
        { 2, 24 },    // 0xDC
        { 0, 0 },    // 0xDD
        { 1, 8 },    // 0xDE
        { 0, 16 },    // 0xDF
        { 1, 12 },    // 0xE0
        { 0, 12 },    // 0xE1
        { 0, 8 },    // 0xE2
        { 0, 0 },    // 0xE3
        { 0, 0 },    // 0xE4
        { 0, 16 },    // 0xE5
        { 1, 8 },    // 0xE6
        { 0, 16 },    // 0xE7
        { 1, 16 },    // 0xE8
        { 0, 4 },    // 0xE9
        { 2, 16 },    // 0xEA
        { 0, 0 },    // 0xEB
        { 0, 0 },    // 0xEC
        { 0, 0 },    // 0xED
        { 1, 8 },    // 0xEE
        { 0, 16 },    // 0xEF
        { 1, 12 },    // 0xF0
        { 0, 12 },    // 0xF1
        { 0, 8 },    // 0xF2
        { 0, 4 },    // 0xF3
        { 0, 0 },    // 0xF4
        { 0, 16 },    // 0xF5
        { 1, 8 },    // 0xF6
        { 0, 16 },    // 0xF7
        { 1, 12 },    // 0xF8
        { 0, 8 },    // 0xF9
        { 2, 16 },    // 0xFA
        { 0, 4 },    // 0xFB
        { 0, 0 },    // 0xFC
        { 0, 0 },    // 0xFD
        { 1, 8 },    // 0xFE
        { 0, 16 }    // 0xFF
};

const int timerCounterValues[4] {
    1024, 16, 64, 256
};
